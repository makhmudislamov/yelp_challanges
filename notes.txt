Problem solving
STEPS:
1. caleify the Problem
2. think about edge cases
3. simplify
4. summarize the problem

                           <<<<<<<<2/13/2020 - Communicate your Skills>>>>>>>>
Adela Chang >> schang@yelp.com
Siddharth Ramakrishnan >> sidram@yelp.com

WHITEBOARD COMMUNICATION
- Interviewer is on your side
- You may not know the exact answer/keyword. But communicate what are you thinking
- Dialogue

BEHAVIORAL INTERVIEWS
Questions:
1. Why do you want to work for this company?
- Do research on the company
- be specific >> add details
- Know yourself >> which of your interests match with the company?

2. Passionate group project
- pick a good project >> ideally 2+ and you learned something
- clearly define your contribution. specify your role
- describe the impact. Is it live? Metrics: downloads, imporvements stats etc.
- you can ask the Interviewer if they want to know any specific aspect.

3. Describe a project
- avoid acronyms
- observe and adjust >> ask their level of knowledge
- practice >> balance technical terms with english, Practice with non-technical friends

4. Team disagreement/conflict situation
- highlight conflict-resolution process, what steps you took
- show the conflict as an opportunity to imporvements
- speak about the situation neutrally >> speak about the teammates in a pro manner
- focus on resolution >> strategies

5. Do you have any questions for me?
- current projects
- typical day
- why did they join the company
- growth opportunity
- how the teams are organized


                           <<<<<<<<2/20/2020 - Working Throught the Yelp Question>>>>>>>>
Matt S and Charles Hager

Anatomy of an Interview
1. Intro
 - Interviewer talks about his role and the team


 kinds of interview questions
 - Coding >> writes code to given problem, less ambiguity
 - design >> little/no coding, lots of ambiguity. You should ask a lot of questions here. 
 - BEHAVIORAL
 - other

 Coding questions
 part1 >> warm up, fairly easy
 part2 >> refactor par1, optimization
 how would you scale this? >> last 5 mins. what if the data is big. usually Interviewer has runout of questions

 tips for Coding questions
 - big O notation
 - try to give multiple solution. 
 - if you know superhard algo DONT do it. just mention it
 - edge cases

 "Scale it"
 - distrubite it
 - can you name a framework?
 - map reduce
 - how to merge the results
 

 tips for design questions
 "scenario. design the system that does X"
 - ask a lot of questions. Dont start working before asking A LOT OF QUESTIONS
 - decisions beased on gut feeling
 - you need: database (sql or nosql), web server (describe API), extra things based on the question

 Questions:
 1. how the data is stored
 2. how many data
 3. how many classifiers?
 4. how often the data is added
 5. runtime of a classifier
 6. requests to handle
 7. how often the requests are made

 design web service
 - what end points will you have? >> names, requests (GET, POST etc), results look like
 - caching response
 - monitoring
